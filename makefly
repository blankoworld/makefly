#!/usr/bin/lua

--[[

TODO:

  * Change process.lua to be into a lib named "blog" (for an example)
  * Export default variables from process.lua into a specific file. Example:

    config = {
      ext = .html
      index_name = index
    }

    Then:

    config = require 'config'
    print(config.ext)

  * QUIET mode
  * Display help in few languages

In main program:

  * Import gettext
  * Include default configuration variables
  * Check that makefly.rc configuration file exists. If not raise an error.
  * Read makefly.rc configuration file (with a ConfigParser that include it in a metatable)
  * Read args to see which one is asked
  * Launch the specific method regarding args

]]--

--[[ VARIABLES ]]--
VERSION = '0.4-trunk'
Command = require 'lib.command'

-- Create commands
commands = { }
table.insert(commands, Command.new('clean', 'clean up result directory'))
table.insert(commands, Command.new('list', 'list all available commands'))
table.insert(commands, Command.new('publish', 'publish your weblog using tools/publish.sh script'))
table.insert(commands, Command.new('refresh', 'same as clean + compile commands'))
table.insert(commands, Command.new('add', 'create a new post'))
table.insert(commands, Command.new('help', 'same as \'list\''))
table.insert(commands, Command.new('createpost', 'same as \'add\''))
table.insert(commands, Command.new('backup', 'make a backup from your current makefly directory'))
table.insert(commands, Command.new('install', 'install \'pub\' directory into INSTALLDIR directory (set in makefly.rc file)'))
table.insert(commands, Command.new('migratefrom', 'will update all DB files with given [url]'))
table.insert(commands, Command.new('theme', 'will copy \'base\' theme to the new one given with [name]'))
table.insert(commands, Command.new('version', 'give current program version'))

--[[ FUNCTIONS ]]--
function clean()
  print("cleaning")
end

function compile()
  print('compiling')
end

function publish()
  print('publishing')
end

function refresh()
  clean()
  compile()
end

function add()
  print('adding')
end

function list()
  res = 'List of available commands: '
  for _, command in pairs(commands) do
    res = res .. string.format('\n\t%s\t\t%s', command.name, command.description)
  end
  print(res)
end

function help()
  return list()
end

function createpost()
  return add()
end

function backup()
  print('backuping')
end

function install()
  print('installing')
end

function migratefrom()
  -- TODO: check second argument to see if an URL was set. If not raise an error
  print('migrating')
end

function theme()
  print('theming')
end

function version()
  print(VERSION)
end


function allowed(command)
  res = false
  for _,v in pairs(commands) do
    if v.name == command then
      res = true
      break
    end
  end
  return res
end

function compilation()
  print("do compilation")
end

--[[ MAIN ]]--

local command = arg[1]
if command ~= nil then
  if allowed(command) == true then
    _G[command]()
  else
    print(string.format("'%s' option not found!", command))
  end
else
  compilation()
end

return 0
