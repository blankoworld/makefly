#!/usr/bin/lua

--[[

TODO:

  * Change process.lua to be into a lib named "blog" (for an example)
  * Export default variables from process.lua into a specific file. Example:

    config = {
      ext = .html
      index_name = index
    }

    Then:

    config = require 'config'
    print(config.ext)

  * QUIET mode
  * Display help in few languages

In main program:

  * Import gettext
  * Include default configuration variables
  * Check that makefly.rc configuration file exists. If not raise an error.
  * Read makefly.rc configuration file (with a ConfigParser that include it in a metatable)
  * Read args to see which one is asked
  * Launch the specific method regarding args

]]--

--[[ DEPENDANCIES ]]--

require 'lib/init'
local utils = require 'lib.utils'

--[[ VARIABLES ]]--
VERSION = '0.4-trunk'
local configfile = os.getenv('CONFIG') or currentpath .. '/config'
-- default display values
display_info =    _('  INFO   ')
display_success = _(' SUCCESS ')
display_enable =  _(' ENABLE  ')
display_disable = _(' DISABLE ')
display_warning = _(' WARNING ')
display_error =   _('  ERROR  ')

--[[ FUNCTIONS ]]--

local function error(message)
  print(message)
  os.exit(1)
end

local function clean(args)
  -- checks
  if config.template_extension == config.page_extension then
    error(string.format(_('[%s] You cannot choose an extension (%s) similar to template\'s one (%s).'), display_error, config.page_extension, config.template_extension))
  end
  -- cleaning
  local pubpath = currentpath .. '/' .. config.destdir
  local tmppath = currentpath .. '/' .. config.tmpdir
  if lfs.attributes(pubpath) ~= nil then
    utils.rm(pubpath)
    print(string.format(_('[%s] Removed: %s directory'), display_info, pubpath))
  else
    print(string.format(_('[%s] Missing: %s directory'), display_warning, pubpath))
  end
  if lfs.attributes(tmppath) ~= nil then
    utils.rm(tmppath)
    print(string.format(_('[%s] Removed: %s directory'), display_info, tmppath))
  else
    print(string.format(_('[%s] Missing: %s directory'), display_warning, tmppath))
  end
  local docpath = currentpath .. '/' .. config.docdir
  docfiles = utils.listing(docpath, config.page_extension)
  for _, file in pairs(docfiles) do
    os.remove(docpath .. '/' .. file)
  end
  print(string.format(_('[%s] Removed: %s/*%s files'), display_info, docpath, config.page_extension))
end

local function compile(args)
  print('compiling')
end

local function publish(args)
  print('publishing')
end

local function refresh(args)
  clean()
  compile()
end

local function add(args)
  print('adding')
end

local function list(args, commands)
  res = 'List of available commands: '
  for command, info in pairs(commands) do
    res = res .. string.format('\n\t%s\t\t%s', command, info.description)
  end
  print(res)
end

local function backup(args)
  print('backuping')
end

local function install(args)
  print('installing')
end

local function migratefrom(args)
  -- TODO: check second argument to see if an URL was set. If not raise an error
  print('migrating')
end

local function theme(args)
  print('theming')
end

local function version(args)
  print(VERSION)
end

local function doc(args)
  print('creating doc')
end

local function allowed(commands, command)
  res = false
  for v,_ in pairs(commands) do
    if v == command then
      res = true
      break
    end
  end
  return res
end

local function compilation()
  print("do compilation")
end

-- Create commands
local commands = { }
commands['clean'] = {
    description = 'clean up result directory',
    launch = function (args) clean(args) end
  }
commands['list'] = {
    description = 'list all available commands',
    launch = function (args) list(args, commands) end
  }
commands['publish'] = {
  description = 'publish your weblog using tools/publish.sh script',
  launch = function (args) publish(args) end
}
commands['refresh'] = {
  description = 'same as clean + compile commands',
  launch = function (args) refresh(args) end
}
commands['add'] = {
  description = 'create a new post',
  launch = function (args) add(args) end
}
commands['help'] = {
  description = 'same as \'list\'',
  launch = function (args) list(args, commands) end
}
commands['createpost'] = {
  description = 'same as \'add\'',
  launch = function (args) add(args) end
}
commands['backup'] = {
  description = 'make a backup from your current makefly directory',
  launch = function (args) backup(args) end
}
commands['install'] = {
  description = 'install \'pub\' directory into INSTALLDIR directory (set in makefly.rc file)',
  launch = function (args) install(args) end
}
commands['migratefrom'] = {
  description = 'will update all DB files with given [url]',
  launch = function (args) migratefrom(args) end
}
commands['theme'] = {
  description = 'will copy \'base\' theme to the new one given with [name]',
  launch = function (args) theme(args) end
}
commands['version'] = {
  description = 'give current program version',
  launch = function (args) version(args) end
}
commands['doc'] = {
  description = 'generate the documentation in \'doc\' directory',
  launch = function (args) doc(args) end
}

--[[ MAIN ]]--

-- check configuration files
local config_default = utils.checkConfig(configfile)
local config_user = utils.checkConfig(config_default.configurationfile)
config = utils.mergeConfig(config_default, config_user)
-- check command
local args = {...}
local command = args[1]
if command ~= nil then
  if allowed(commands, command) == true then
    commands[command].launch(args)
  else
    print(string.format("'%s' option not found!", command))
  end
else
  compilation()
end

return 0
